import { Graph } from "$lib/graph.svelte";

const house = new Graph(
  "Maison",
  [ { x: 1, y: 4 }, { x: 3, y: 4 }, { x: 2, y: 3 }, { x: 1, y: 2 }, { x: 3, y: 2 }, { x: 2, y: 1 }
  ].map(({ x, y }) => ({ x: x / 5, y: y / 5 })),
  [ [0,1], [1,4], [3,4], [0,3], [0,2], [1,2], [2,3], [2,4], [3,5], [4,5] ]
);

const hourglass = new Graph(
  "Sablier",
  [
    { x: 1, y: 0.7 },
    { x: 4, y: 0.7 },
    { x: 2.5, y: 1.2 },
    { x: 2.5, y: 1.9 },
    { x: 1.5, y: 1.9 },
    { x: 3.5, y: 1.9 },
    { x: 1.5, y: 2.5 },
    { x: 3.5, y: 2.5 },
    { x: 2.5, y: 2.5 },
    { x: 2.5, y: 3.2 },
    { x: 1, y: 3.7 },
    { x: 4, y: 3.7 }
  ].map(({ x, y }) => ({ x: x / 5, y: y / 5 })),
  [ [0,1], [0,2], [1,2], [2,3], [3,4], [3,5], [4,6], [5,7], [6,8], [7,8], [8,9], [9,10], [9,11], [10,11] ]
);

const house2 = new Graph(
  "Maison avec cave",
  [
    { x: 2, y: 2.5 },
    { x: 1, y: 3.2 },
    { x: 3, y: 3.2 },
    { x: 1, y: 1.8 },
    { x: 3, y: 1.8 },
    { x: 2, y: 1 },
    { x: 2, y: 4 },
  ].map(({ x, y }) => ({ x: x / 5, y: y / 5 })),
  [ [0, 1], [0,2], [0,3], [0,4], [1,2], [2,4], [3,4], [1,3], [3,5], [4,5], [1,6], [2,6] ]
);

const interlace = new Graph(
  "Entrelacements",
  [
    { x: 2.5, y: 1 },
    { x: 4, y: 1 },
    { x: 1, y: 2 },
    { x: 2.5, y: 2 },
    { x: 3.25, y: 2 },
    { x: 2.5, y: 2.5 },
    { x: 3.25, y: 2.5 },
    { x: 4, y: 2.5 },
    { x: 1, y: 4 },
    { x: 3.25, y: 4 },
  ].map(({ x, y }) => ({ x: x / 5, y: y / 5 })),
  [ [0,1], [0,3], [2,3], [3,4], [1,7], [5,6], [6,7], [3,5], [4,6], [2,8], [6,9], [8,9] ]
);

const grid = new Graph(
  "Grille",
  [
    { x: 0, y: 0.5 },
    { x: 2, y: 0.5 },
    { x: 4, y: 0.5 },
    { x: 1, y: 1.5 },
    { x: 3, y: 1.5 },
    { x: 0, y: 2.5 },
    { x: 2, y: 2.5 },
    { x: 4, y: 2.5 },
    { x: 1, y: 3.5 },
    { x: 3, y: 3.5 },
    { x: 0, y: 4.5 },
    { x: 2, y: 4.5 },
    { x: 4, y: 4.5 },
  ].map(({ x, y }) => ({ x: (x * 0.85 + 1) / 5, y: (y * 0.85 + 0.21) / 5 })),
  [ [0,1], [1,2], [0,3], [1,3], [1,4], [2,4], [3,5], [3,6], [4,6], [4,7], [5,8], [6,8], [6,9],
    [7,9], [8,10], [8,11], [9,11], [9,12], [10,11], [11,12], [0,5], [2,7], [5,10], [7,12]
  ]
);

const konisberg = new Graph(
  "Ponts de Königsberg",
  [
    { x: 1, y: 0 },
    { x: 3, y: 0 },
    { x: 0, y: 1 },
    { x: 2, y: 1 },
    { x: 4, y: 1 },
    { x: 1, y: 2 },
    { x: 3, y: 2 },
    { x: 0, y: 3 },
    { x: 2, y: 4 },
    { x: 4, y: 3 }
  ].map(({ x, y }) => ({ x: (x * 0.85 + 1) / 5, y: (y * 0.85 + 1) / 5 })),
  [ [0,2], [0,3], [1,3], [1,4], [4,6], [3,6], [3,5], [2,5], [2,7], [3,8], [4,9], [7,8], [8,9] ]
);

const ex1 = new Graph(
  "Tour",
  [
    { x: 1, y: 0 },
    { x: 0, y: 1 },
    { x: 2, y: 1 },
    { x: 1, y: 2 },
    { x: 0, y: 3 },
    { x: 2, y: 3 },
    { x: 1, y: 4 },
    { x: 0, y: 5 },
    { x: 2, y: 5 },
  ].map(({ x, y }) => ({ x: (x * 0.9 + 1.0) / 5, y: (y * 0.9 + 0.2) / 5 })),
  [ [0,1], [0,2], [1,2], [1,3], [2,3], [3,4], [3,5], [4,5], [1,4], [2,5],
    [4,6], [5,6], [6,7], [6,8], [4,7], [5,8]
  ]
);

const ex3 = new Graph(
  "Soleil",
  [
    { x: 1, y: 2 },
    { x: 2, y: 1 },
    { x: 3, y: 2 },
    { x: 2, y: 3 },
    { x: 0.5, y: 0.5 },
    { x: 0.5, y: 3.5 },
    { x: 3.5, y: 3.5 },
    { x: 3.5, y: 0.5 },
    { x: 2, y: 2 },
  ].map(({ x, y }) => ({ x: x * 1.15 / 5, y: y * 1.15 / 5 })),
  [ [0,1], [1,2], [2,3], [0,3], [0,8], [1,8], [2,8], [3,8], [0,4], [1,4], [0,5],
        [3,5], [2,6], [3,6], [1,7], [2,7] ]
);

const city = new Graph(
  "Ville folle",
  [
    { x: 0, y: 0 },
    { x: 2, y: 0 },
    { x: 3, y: 0 },
    { x: 0, y: 1 },
    { x: 1, y: 1 },
    { x: 2, y: 1 },
    { x: 3, y: 1 },
    { x: 1, y: 2 },
    { x: 2, y: 2 },
    { x: 3, y: 2 },
    { x: 4, y: 2 },
    { x: 1, y: 3 },
    { x: 2, y: 3 },
    { x: 4, y: 3 },
    { x: 0, y: 4 },
    { x: 1, y: 4 },
    { x: 3, y: 4 },
    { x: 4, y: 4 },
    { x: 1, y: 5 },
    { x: 2, y: 5 },
    { x: 3, y: 5 },
    { x: 4, y: 5 },
  ].map(({ x, y }) => ({ x: (x * 0.75 + 1) / 5, y: (y * 0.72 + 0.6) / 5 })),
  [ [1,2], [0,3], [0,4], [1,4], [2,5], [4,5], [3,7], [4,8], [7,8], [5,8], [5,9],
    [6,9], [6,10], [8,11], [9,12], [11,12], [10,13], [14,15], [15,16], [16,17],
    [9,16], [12,16], [13,16], [14,18], [15,19], [16,20], [17,21], [18,19], [20,21]
  ]
);

const owl = new Graph(
  "Hibou",
  [
    { x: 0, y: 0 },
    { x: 2, y: 0 },
    { x: 0, y: 1 },
    { x: 1, y: 1 },
    { x: 2, y: 1 },
    { x: 3, y: 1 },
    { x: 0, y: 2 },
    { x: 1, y: 2 },
    { x: 2, y: 2 },
    { x: 3, y: 2 },
    { x: 1, y: 3 },
    { x: 2, y: 3 },
    { x: 4, y: 3 },
    { x: 1, y: 4 },
    { x: 2, y: 4 },
    { x: 3, y: 4 },
    { x: 4, y: 4 },
    { x: 1, y: 5 },
    { x: 3, y: 5 },
  ].map(({ x, y }) => ({ x: (x * 0.8 + 0.5) / 5, y: (y * 0.8 + 0.6) / 5 })),
  [ [0,2], [0,3], [1,3], [1,4], [2,3], [3,4], [4,5], [2,6], [2,7], [3,7], [3,8],
    [4,8], [4,9], [5,9], [6,7], [7,8], [7,10], [7,11], [8,11], [9,11], [9,12], [10,14],
    [11,15], [12,15], [9,15], [13,14], [14,15], [15,16], [13,17], [14,17], [15,18],
    [16,18]
  ]
);

const rabbit = new Graph(
  "Lièvre bondissant",
  [
    { x: 1, y: 0 },
    { x: 2, y: 0 },
    { x: 4, y: 0 },
    { x: 2, y: 1 },
    { x: 3, y: 1 },
    { x: 4, y: 1 },
    { x: 1, y: 2 },
    { x: 2, y: 2 },
    { x: 3, y: 2 },
    { x: 4, y: 2 },
    { x: 0, y: 3 },
    { x: 2, y: 3 },
    { x: 3, y: 3 },
    { x: 4, y: 3 },
    { x: 0, y: 4 },
    { x: 1, y: 4 },
    { x: 2, y: 4 },
    { x: 3, y: 4 },
    { x: 1, y: 5 },
  ].map(({ x, y }) => ({ x: (x * 0.8 + 1) / 5, y: (y * 0.8 + 0.8) / 5 })),
  [ [0,1], [0,3], [1,4], [2,4], [2,5], [3,4], [4,5], [3, 6], [3,7], [4,7], [4,8],
    [5,8], [5,9], [7,8], [8,9], [6,10], [6,11], [7,11], [9,12], [12,13], [6,15],
    [10,15], [11,15], [14,15], [15,16], [12,16], [12,17], [13,17], [14,18], [15, 18]
  ]
)

const cross = new Graph(
  "Croix",
  [
    { x: 0, y: 1 },
    { x: 0, y: 2 },
    { x: 0.5, y: 1.5 },
    // 0 -- 2
    { x: 1, y: 0 },
    { x: 1, y: 1 },
    { x: 1, y: 2 },
    { x: 1, y: 3 },
    // 3 -- 6
    { x: 1.5, y: 0.5 },
    { x: 1.5, y: 1.5 },
    { x: 1.5, y: 2.5 },
    // 7 -- 9
    { x: 2, y: 0 },
    { x: 2, y: 1 },
    { x: 2, y: 2 },
    { x: 2, y: 3 },
    // 10 -- 13
    { x: 2.5, y: 1.5 },
    { x: 3, y: 1 },
    { x: 3, y: 2 }, // 14 -- 16
  ].map(({ x, y }) => ({ x: (x * 1.3 + 0.5) / 5, y: (y * 1.3 + 0.5) / 5 })),
  [
    [0,1], [0,2], [1,2], [0,4], [1,5], [2,4], [2,5], [3,4], [4,5], [5,6], [3,7], [4,7],
    [4,8], [5,8], [5,9], [6,9], [3,10], [4,11], [5,12], [6,13], [7,10], [7,11], [8,11],
    [8,12], [9,12], [9,13], [10,11], [11,12], [12,13], [11,14], [12,14], [11,15], [12,16],
    [14,15], [14,16], [15,16]
  ]
);

export default [ house, house2, hourglass, interlace, grid, konisberg, ex1, ex3, city, owl, rabbit, cross];
